{"version":3,"file":"main.a68a4d64a6b77b5fb455.hot-update.js","sources":["webpack:///./src/components/Typography/index.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport styled, { css } from 'styled-components';\n\n// サイズとスタイル\nconst sizeMap = {\n  xs: css`\n  font-size: 12px;\n  line-height: 1.66;\n  `,\n  s: css`\n  font-size: 14px;\n  line-height: 1.66;\n  `,\n  m: css`\n  font-size: 16px;\n  line-height: 1.66;\n  `,\n  subtitle: css`\n  font-size: 18px;\n  line-height: 1.66;\n  `,\n  title: css`\n  font-size: 20px;\n  line-height: 1.66;\n  `,\n};\n\n// colorとスタイル\n// inheritキーワードを使えば強制的に継承させる事が可能\nconst colorsMap = {\n  inherit: 'inherit',\n  black: '#000000',\n  red: '#ff3300',\n  gray: '#8c8c8c',\n};\n\nexport const sizes = Oblect.keys(sizeMap);\nexport const colors = Oblect.keys(colorMap);\nexport const displays = ['initial', 'block', 'inline', 'inline-block'];\nexport const aligns = ['left', 'right', 'center'];\n\nconst Root = styled.p`\n  margin: 0;\n  color: ${(props) => colorsMap[props.color]};\n  ${(props) => sizeMap[props.size]};\n  display: ${({ display }) => display};\n  text-align: ${({ align }) => align};\n  font-weight: ${({ bold }) => (bold ? 'bold' : 'normal')};\n`\n\nconst TypoGraphy = ({\n  className,\n  size,\n  color,\n  display,\n  align,\n  bold,\n  children\n  }) => {\n  <Root className={className} size={size} color={color} display={display} align={align} bold={bold}>\n    {children}\n  </Root>\n  // childrenはTypographyで表示するテキストコンテンツ\n};\n\nTypography.propTypes = {\n  className: PropTypes.string,\n  size: PropTypes.oneOf(sizes),\n  color: PropTypes.oneOf(colors),\n  display: PropTypes.oneOf(displays),\n  align: PropTypes.oneOf(aligns),\n  bold: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n};\n\nTypography.defaultProps = {\n  className: '',\n  size: 'm',\n  color: 'inherit',\n  align: 'left',\n  bold: false,\n  display: 'block',\n};\n\nexport default Typography;\n\n\n// Object.keys() メソッドは、指定されたオブジェクトが持つプロパティの 名前の配列を、通常のループで取得するのと同じ順序で返す\n\n// PropTypesはパッケージprop-typesを使った機能で、コンポーネントに渡すpropsの値についてのルール・型を設定するためのものです。コンポーネントのpropTypesにPropTypesを使ったルールを設定したオブジェクトを設定できる\n\n// オプション\t値に設定される条件の説明\n// PropTypes.number\t数値であること\n// PropTypes.string\t文字列であること\n// PropTypes.arrayOf(PropTypes.string)\t文字列の配列であること\n// PropTypes.bool\tbooleanであること\n// PropTypes.shape({ hoge: PropTypes.string })\thogeが文字列であるオブジェクトであること\n// PropTypes.func\t関数であること\n// PropTypes.node\trenderできるものであること\n// PropTypes.oneOf(['foo', 'bar'])\tfooかbarのどちらかであること\n// PropTypes.oneOfType([PropTypes.string, PropTypes.array])\t文字列か配列であること\n// PropTypes.string.isRequired\t文字列であること、値が未設定出ないこと"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;AACA;AAIA;AAIA;AAIA;AAIA;AAjBA;AAwBA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}